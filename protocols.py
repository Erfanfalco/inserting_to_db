from typing import Protocol, Optional


class ConnectionLike(Protocol):
    def connect(self) -> None: ...

    def close(self) -> None: ...

    def get_cursor(self) -> Optional['CursorLike']: ...

    def commit(self) -> None: ...

    def rollback(self) -> None: ...


class CursorLike(Protocol):
    def execute(self, query: str, params: tuple = ()) -> None: ...

    def executemany(self, query: str, params: tuple) -> None: ...

    def fetchall(self) -> list[tuple]: ...

    def fetchone(self) -> Optional[tuple]: ...